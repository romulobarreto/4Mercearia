from controllers.funcionario_controller import *
from views.cargo_view import *
from utils.formatacao import formatar_cpf, formatar_telefone, formatar_preco
from decimal import Decimal, InvalidOperation
from utils.buscas import buscar_nome, buscar_nome

class FuncionarioView():

    @staticmethod
    def cadastrar_funcionario():
        # Carrega as listas de cargos e verifica se est치 vazia
        cargos = CargoDao.carregar_cargos()
        
        if not cargos:
            print("\n游뛂 N칚o existe nenhum cargo cadastrado, n칚o 칠 poss칤vel cadastrar um funcion치rio.")
            return
        
        # Solicita os inputs ao usu치rio
        nome = input("\nDigite o nome do funcion치rio: ").strip().lower()

        cpf = input("\nDigite o CPF do funcion치rio: ").strip().replace(".", "").replace("-", "")

        telefone = input("\nDigite o telefone do funcion치rio (DDD + N칰mero):  ").strip().replace("(", "").replace(")", "").replace("-","").replace(" ","")

        # Exibe os cargos dispon칤veis para cadastro
        CargoView.detalhar_cargos()

        try:
            cargo_id = int(input("\nDigite o ID do cargo que ser치 atribu칤do ao funcion치rio: ").strip())
        except ValueError:
            print("\n丘멆잺 O valor n칚o est치 na formata칞칚o correta.")
            return
        
        try:
            salario = Decimal(input("\nDigite o sal치rio do funcion치rio: R$").strip().replace(".", "").replace(",", "."))
        except InvalidOperation:
            print("\n丘멆잺 O valor n칚o est치 na formata칞칚o correta.")
            return
        
        # Chama a fun칞칚o de cadastrar funcion치rio
        sucesso, mensagem = FuncionarioController.cadastrar_funcionario(nome, cpf, telefone, cargo_id, salario)
        print(mensagem)






    @staticmethod
    def detalhar_funcionarios(id=None):
        # Chama a fun칞칚o de detalhar
        sucesso, mensagem = FuncionarioController.detalhar_funcionarios(id)
        # Exibe o resultado
        print(mensagem)