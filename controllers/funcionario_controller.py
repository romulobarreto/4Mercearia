from decimal import Decimal
from models.funcionario import *
from daos.cargo_dao import *
from daos.venda_dao import *
from daos.funcionario_dao import *
from utils.validacao import validar_cpf, validar_telefone
from utils.formatacao import formatar_preco, formatar_telefone, formatar_cpf
from utils.gerador import gerador_id
from utils.buscas import criar_dict

class FuncionarioController():

    @staticmethod
    def validar_dados(nome, cpf, telefone, cargo_id, salario, cpf_atual=None):
        # Carrega a lista de funcion√°rios e de cargos
        funcionarios = FuncionarioDao.carregar_funcionario()
        cargos = CargoDao.carregar_cargos()

        # Valida o nome
        if not nome:
            return False, "\n‚ö†Ô∏è O nome precisa ser preenchido."
        
        # Valida o cpf (Verificar retorno da funcao)
        validador_cpf = validar_cpf(cpf)

        if not validador_cpf:
            return False, "\n‚ö†Ô∏è CPF inv√°lido."
        
        if cpf != cpf_atual and any(funcionario["cpf"] == cpf for funcionario in funcionarios):
            return False, f"\n‚ùå CPF j√° cadastrado."
        
        # Valida o telefone
        verificar_telefone = validar_telefone(telefone)

        if not verificar_telefone:
            return False, f"\n‚ö†Ô∏è O telefone: {telefone} n√£o est√° no padr√£o. Use o formato DDD + n√∫mero (Ex: 11987654321)."
        
        # Valida o cargo
        if not any(cargo["id"] == cargo_id for cargo in cargos):
            return False, f"\n‚ö†Ô∏è N√£o existe cargo cadastrado para o ID: {cargo_id}."
        
        # Valida o sal√°rio
        if salario <= Decimal("0"):
            return False, "\n‚ö†Ô∏è O funcion√°rio n√£o pode trabalhar de gra√ßa."
        
        # Retorna sucesso
        return True, "\n‚úÖ Dados validados."
    




    @staticmethod
    def cadastrar_funcionario(nome, cpf, telefone, cargo_id, salario):
        # Valida os dados recebidos
        sucesso, mensagem = FuncionarioController.validar_dados(nome, cpf, telefone, cargo_id, salario)

        if not sucesso:
            return False, mensagem
        
        # Carrega a lista de funcion√°rios
        funcionarios = FuncionarioDao.carregar_funcionario()

        # Cria o ID do funcion√°rio
        id = gerador_id(funcionarios)

        # Cria o funcion√°rio
        funcionario = Funcionario(id, nome, cpf, telefone, cargo_id, salario)

        # Adiciona o funcion√°rio a lista de cadastro
        funcionarios.append(funcionario.salvar_dict())

        # Salva o funcion√°rio no banco (JSON)
        sucesso, mensagem = FuncionarioDao.salvar_funcionario(funcionarios)

        # Mensagem de sucesso
        if sucesso:
            return True, mensagem
        else:
            return False, mensagem
        






    @staticmethod
    def detalhar_funcionarios(id=None):
        # Carrega a lista de funcion√°rios e de cargos
        cargos = CargoDao.carregar_cargos()
        funcionarios = FuncionarioDao.carregar_funcionario()

        # Verifica se possui funcion√°rio cadastrado
        if not funcionarios:
            return False, "\n‚ö†Ô∏è A lista de funcion√°rios est√° vazia."
        
        # Cria o dicion√°rio de acesso r√°pido de ID - Cargo
        cargos_dict = criar_dict(cargos)

        # Formata e exibe a lista de um √∫nico ID
        if id:
            lista_formatada = "\nüìã Detalhes do funcion√°rio:\n"
            for funcionario in funcionarios:
                cargo_nome = cargos_dict[funcionario["cargo_id"]]
                if funcionario["id"] == id:
                    lista_formatada += (
                        f"ID {funcionario["id"]}: {funcionario["nome"].title()}\n"
                        f"CPF: {formatar_cpf(funcionario["cpf"])}\n"
                        f"Telefone: {formatar_telefone(funcionario["telefone"])}\n"
                        f"Cargo: {cargo_nome.title()}\n"
                        f"Sal√°rio: {formatar_preco(Decimal(funcionario["salario"]))}\n"
                        f"---------------------------\n"
                    )
                    break
        # Formata e exibe a lista completa
        else:
            lista_formatada = "\nüìã Lista de funcion√°rios cadastrados:\n"
            for funcionario in sorted(funcionarios, key=lambda c: c["nome"]):
                cargo_nome = cargos_dict[funcionario["cargo_id"]]
                
                lista_formatada += (
                    f"ID {funcionario["id"]}: {funcionario["nome"].title()}\n"
                    f"CPF: {formatar_cpf(funcionario["cpf"])}\n"
                    f"Telefone: {formatar_telefone(funcionario["telefone"])}\n"
                    f"Cargo: {cargo_nome.title()}\n"
                    f"Sal√°rio: {formatar_preco(Decimal(funcionario["salario"]))}\n"
                    f"---------------------------\n"
                )
        
        return True, lista_formatada
    





    @staticmethod
    def excluir_funcion√°rio(id_funcionario):
        # Carrega a lista de funcion√°rios e vendas
        funcionarios = FuncionarioDao.carregar_funcionario()
        vendas = VendaDao.carregar_vendas()

        # Verifica se o ID informado est√° na base de cadastro
        dicionario_funcionario = None
        for funcionario in funcionarios:
            if funcionario["id"] == id_funcionario:
                dicionario_funcionario = funcionario
                break

        # Caso nenhum funcion√°rio encontrado, finaliza a fun√ß√£o
        if not dicionario_funcionario:
            return False, f"\n‚ö†Ô∏è O ID: {id_funcionario}, n√£o est√° na lista de funcion√°rios."
        
        # Verificar se o funcion√°rio realizou alguma venda, se sim, n√£o permitir exclus√£o do mesmo.
        for venda in vendas:
            if venda["cliente_id"] == id_funcionario:
                return False, f"\n‚ö†Ô∏è O ID: {id_funcionario} faz parte de uma venda, n√£o pode ser exclu√≠do."

        # Remove o funcion√°rio escolhido da lista
        funcionarios.remove(dicionario_funcionario)

        # Salva a lista sem o funcion√°rio
        sucesso, mensagem = FuncionarioDao.salvar_funcionario(funcionarios)

        return True, f"\n‚úÖ {dicionario_funcionario["nome"].title()} foi removido com sucesso."
    








    @staticmethod
    def editar_funcionario(nome, cpf, telefone, cargo_id, salario, lista_funcionario):
        # Chama a valida√ß√£o de dados
        sucesso, mensagem = FuncionarioController.validar_dados(nome, cpf, telefone, cargo_id, salario, lista_funcionario["cpf"])

        if not sucesso:
            return False, mensagem
        
        # Carrega a lista de funcion√°rios
        funcionarios = FuncionarioDao.carregar_funcionario()

        # Atualiza a lista de funcion√°rios
        for funcionario in funcionarios:
            if funcionario["id"] == lista_funcionario["id"]:
                funcionario["nome"] = nome
                funcionario["cpf"] = cpf
                funcionario["telefone"] = telefone
                funcionario["cargo_id"] = cargo_id
                funcionario["salario"] = str(salario)
                break
        
        # Salva as altera√ß√µes no banco
        sucesso, mensagem = FuncionarioDao.salvar_funcionario(funcionarios)

        if sucesso:
            return True, "‚úÖ Funcion√°rio editado com sucesso."
        else:
            return False, "‚ö†Ô∏è Erro ao salvar a altera√ß√£o no banco de dados."